postgres:
  tables:
    role_requests:
      type: application/json;type=role_request
      columns:
        role: TEXT
    role_assertions:
      type: application/json;type=role_assertion
      columns:
        role: TEXT
        assignee: TEXT
    my_content:
      type: application/json;type=my_content
      columns:
        content: TEXT
        expert: BOOLEAN
    study_requests:
      type: application/json;type=study_request
      columns:
        study: TEXT
    study_grants:
      type: application/json;type=study_grant
      columns:
        study: TEXT
        granted: BOOLEAN
    assignments:
      type: application/json;type=assignment
      columns:
        group_id: TEXT
        assignment_id: TEXT
        assignment_type: TEXT
    group_members:
      type: application/json;type=group_member
      columns:
        user_id: TEXT
        group_id: TEXT
    assignable_items:
      type: application/json;type=assignable_item
      columns:
        item_type: TEXT
    teachers:
      type: application/json;type=teacher
      columns: {}
    assignment_scopes:
      type: application/json;type=assignment_scope
      columns:
        scope: TEXT
        assignment_id: TEXT
  functions:
    userHasPermission:
      returns: BOOLEAN
      language: PLpgSQL
      body: |
        BEGIN
          RETURN permission = 'admin' AND user_id IN ('Z27illIpwKSKyneNpxhCEZiTjLJ2', 'jX4ruKnaNfRP2D0gftNPeowb2ZE2');
        END;
      arguments:
      - name: user_id
        type: TEXT
      - name: permission
        type: TEXT
  scopes:
    role-assignments: |
      SELECT
        ra.assignee,
        CASE
          WHEN userHasPermission(ra.assignee, 'admin') THEN 'admin'
          ELSE ra.role
        END AS role,
        m.updated
      FROM role_assertions ra
      JOIN metadata m
        ON ra.id = m.id
      WHERE
        (ra.assignee, m.updated) IN (
          SELECT assignee, MAX(updated)
          FROM role_assertions
          JOIN metadata ON role_assertions.id = metadata.id
          WHERE userHasPermission(owner, 'admin')
          GROUP BY assignee
        )
        AND userHasPermission(m.owner, 'admin')
    my-role: |
      SELECT
        ra.assignee,
        CASE
          WHEN userHasPermission(ra.assignee, 'admin') THEN 'admin'
          ELSE ra.role
        END AS role,
        m.updated
      FROM role_assertions ra
      JOIN metadata m
        ON ra.id = m.id
      WHERE
        (ra.assignee, m.updated) IN (
          SELECT assignee, MAX(updated)
          FROM role_assertions
          JOIN metadata ON role_assertions.id = metadata.id
          WHERE userHasPermission(owner, 'admin')
          GROUP BY assignee
        )
        AND userHasPermission(m.owner, 'admin')
        AND ra.assignee = $REQUESTER
    requested-roles: |
      SELECT
        role_requests.role AS role,
        metadata.owner     AS assignee,
        metadata.updated   AS updated
      FROM role_requests
      LEFT JOIN metadata
        ON metadata.id = role_requests.id
    expert-content: |
      SELECT
        mc.content
      FROM my_content mc
      JOIN metadata m ON mc.id = m.id
      WHERE
        (mc.content, m.updated) IN (
          SELECT content, MAX(updated)
          FROM my_content
          JOIN metadata ON my_content.id = metadata.id
          WHERE userHasPermission(owner, 'admin')
            AND my_content.expert
          GROUP BY content
        )
        AND userHasPermission(m.owner, 'admin')
    requested-studies: |
      SELECT
        study_requests.id     AS study,
        latest_grants.granted AS granted,
        srm.owner             AS researcher,
        srm.updated
      FROM study_requests
      LEFT JOIN metadata srm ON srm.id = study_requests.id
      LEFT JOIN (
        SELECT
          study,
          granted
        FROM (
          SELECT
            study,
            granted,
            ROW_NUMBER() OVER (PARTITION BY study_grants.id ORDER BY updated DESC) AS rn
          FROM study_grants
          LEFT JOIN metadata sgm ON sgm.id = study_grants.id
          WHERE userHasPermission(sgm.owner, 'admin')
        ) AS subquery
        WHERE rn = 1
      ) latest_grants
      ON latest_grants.study = study_requests.study
      WHERE srm.owner = $REQUESTER
    assignments-to-me: |
      SELECT
        DISTINCT assignment_id,
        assignments.id AS id,
        assignments.assignment_type as assignment_type,
        assignments.owner AS assigner_id,
        (
          SELECT owner
          FROM assignable_items
          WHERE id = assignments.assignment_id
          ORDER BY created ASC
          LIMIT 1
        ) AS authority,
        assignable_items.item_type AS assignable_item_type
      FROM assignments
      LEFT JOIN assignable_items
        ON assignable_items.owner = assignments.owner AND assignable_items.id = assignments.assignment_id
      WHERE
        assignment_id IN (
          SELECT assignment_id
          FROM assignments
          WHERE group_id IN (
            SELECT group_id
            FROM group_members
            WHERE user_id = $REQUESTER
          )
        )
        AND (
          assignable_items.item_type = 'teacher-created'
          OR (
            SELECT granted
            FROM study_grants
            WHERE userHasPermission(study_grants.owner, 'admin')
              AND assignments.assignment_id = study_grants.id
            ORDER BY study_grants.updated DESC
            LIMIT 1
          )
        )
    my-students: |
      SELECT
        owner AS student
      FROM teachers
      LEFT JOIN metadata
        ON teachers.id = metadata.id
      WHERE teachers.id = $REQUESTER
